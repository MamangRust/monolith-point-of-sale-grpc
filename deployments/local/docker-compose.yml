services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: DRAGON
      POSTGRES_PASSWORD: DRAGON
      POSTGRES_DB: POINTOFSALE
    ports:
      - "5432:5432"
    volumes:
      - postgres_pointofsale_data:/var/lib/postgresql/data
    networks:
      - app_pointofsale_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U DRAGON -d POINTOFSALE"]
      interval: 5s
      timeout: 5s
      retries: 5
  migrate:
    image: migrate-pointofsale-service:1.0
    container_name: migrate
    volumes:
      - ./docker.env:/app/docker.env
      - ./pkg/database/migrations:/app/pkg/database/migrations
    env_file: ./docker.env
    environment:
      APP_ENV: docker
      DB_URL: postgres://DRAGON:DRAGON@postgres/POINTOFSALE
    networks:
      - app_pointofsale_network
    depends_on:
      postgres:
        condition: service_healthy

  apigateway:
    image: apigateway-pointofsale-service:1.0
    container_name: apigateway_pointofsale
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    ports:
      - "5000:5000"
    networks:
      - app_pointofsale_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      auth:
        condition: service_started
      role:
        condition: service_started
      user:
        condition: service_started
      category:
        condition: service_started
      merchant:
        condition: service_started
      orderitem:
        condition: service_started
      order:
        condition: service_started
      product:
        condition: service_started
      transaction:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker

  auth:
    image: auth-pointofsale-service:1.0
    container_name: auth_pointofsale
    env_file: ./docker.env 
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    ports:
      - "50051:50051"
      - "8081:8081"
    networks:
      - app_pointofsale_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  role:
    image: role-pointofsale-service:1.0
    container_name: role_pointofsale
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    ports:
      - "50052:50052"
      - "8082:8082"
    networks:
      - app_pointofsale_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  user:
    image: user-pointofsale-service:1.0
    container_name: user_pointofsale
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    ports:
      - "50053:50053"
      - "8083:8083"
    networks:
      - app_pointofsale_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  category:
    image: category-pointofsale-service:1.0
    container_name: category_pointofsale
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    ports:
      - "50054:50054"
      - "8084:8084"
    networks:
      - app_pointofsale_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  cashier:
    image: cashier-pointofsale-service:1.0
    container_name: cashier_pointofsale
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    ports:
      - "50055:50055"
      - "8085:8085"
    networks:
      - app_pointofsale_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  merchant:
    image: merchant-pointofsale-service:1.0
    container_name: merchant_pointofsale
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    ports:
      - "50056:50056"
      - "8086:8086"
    networks:
      - app_pointofsale_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  orderitem:
    image: order_item-pointofsale-service:1.0
    container_name: orderitem_pointofsale
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    ports:
      - "50057:50057"
      - "8087:8087"
    networks:
      - app_pointofsale_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  order:
    image: order-pointofsale-service:1.0
    container_name: order_pointofsale
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    ports:
      - "50058:50058"
      - "8088:8088"
    networks:
      - app_pointofsale_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  product:
    image: product-pointofsale-service:1.0
    container_name: product_pointofsale
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    ports:
      - "50059:50059"
      - "8089:8089"
    networks:
      - app_pointofsale_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  transaction:
    image: transaction-pointofsale-service:1.0
    container_name: transaction_pointofsale
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    ports:
      - "50060:50060"
      - "8090:8090"
    networks:
      - app_pointofsale_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092


  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: my-zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app_pointofsale_network
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:latest
    container_name: my-kafka-pointofsale
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_KRAFT_CLUSTER_ID=kraft-cluster-01
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_pointofsale_data:/bitnami/kafka
    networks:
      - app_pointofsale_network
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server kafka:9092 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.9.0
    container_name: kafka-exporter_pointofsale
    ports:
      - "9308:9308"
    networks:
      - app_pointofsale_network
    depends_on:
      kafka:
        condition: service_healthy
    command: 
      - "--kafka.server=my-kafka-pointofsale:9092"
      - "--web.listen-address=0.0.0.0:9308"
      - "--log.level=debug"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9308/metrics || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_pointofsale
    ports:
      - "9090:9090"
    volumes:
      - ../../observability/prometheus.yaml:/etc/prometheus/prometheus.yml:ro
      - ../../observability/rules:/etc/prometheus/rules
    networks:
      - app_pointofsale_network
    depends_on:
      - otel-collector
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_pointofsale
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_pointofsale-storage:/var/lib/grafana  
    networks:
      - app_pointofsale_network
    depends_on:
      - prometheus
      - jaeger
      - alertmanager
      - loki

  nginx:
    image: nginx:alpine
    container_name: nginx_pointofsale
    ports:
      - "80:80"
    volumes:
      - ../../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - apigateway
    networks:
      - app_pointofsale_network

  redis:
    image: redis:7.4
    container_name: redis_pointofsale
    command: ["redis-server", "--requirepass", "dragon_knight"]
    ports:
      - "6379:6379"
    volumes:
      - redis_pointofsale_data:/data
    restart: unless-stopped
    networks:
      - app_pointofsale_network



  node-exporter:
    image: quay.io/prometheus/node-exporter
    container_name: node-exporter_pointofsale
    pid: "host"
    networks:
      - app_pointofsale_network
    volumes:
      - "/:/host:ro,rslave"
    command:

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector_pointofsale
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./observability/otel-collector.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"     
      - "4318:4318"      
      - "13133:13133"
      - "8889:8889"
    networks:
      - app_pointofsale_network
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.62.0
    container_name: jaeger_pointofsale
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    networks:
      - app_pointofsale_network
  
  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: alertmanager_pointofsale
    volumes:
      - ../../observability/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
    ports:
      - "9093:9093"
    networks:
      - app_pointofsale_network

  loki:
    image: grafana/loki:2.9.0
    container_name: loki_pointofsale
    ports:
      - "3100:3100"
    volumes:
      - ../../observability/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_pointofsale_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app_pointofsale_network

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail_pointofsale
    volumes:
      - ../../observability/promtail-config.yaml:/etc/promtail/config.yaml
      - ./logs:/var/log/app
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - app_pointofsale_network

volumes:
  loki_pointofsale_data:
  grafana_pointofsale-storage:
  postgres_pointofsale_data:
  kafka_pointofsale_data:
  redis_pointofsale_data:


networks:
  app_pointofsale_network:
    driver: bridge